type = "vrf"
name = "vrf_v2_plus"
schemaVersion = 1
coordinatorAddress = "{{.VRF_COORDINATOR_ADDRESS}}"
batchCoordinatorAddress = "{{.VRF_BATCH_COORDINATOR_ADDRESS}}"
batchFulfillmentEnabled = true
batchFulfillmentGasMultiplier = 1.1
publicKey = "{{.VRF_KEY}}"
minIncomingConfirmations = 3
evmChainID = "{{.CHAIN_ID}}"
fromAddresses = ["{{.ETH_ADDRESS}}"]
pollPeriod = "2s"
requestTimeout = "24h"
observationSource = """
decode_log              [type=ethabidecodelog
                         abi="RandomWordsRequested(bytes32 indexed keyHash,uint256 requestId,uint256 preSeed,uint256 indexed subId,uint16 minimumRequestConfirmations,uint32 callbackGasLimit,uint32 numWords,bytes extraArgs,address indexed sender)"
                         data="$(jobRun.logData)"
                         topics="$(jobRun.logTopics)"]
generate_proof          [type=vrfv2plus
                         publicKey="$(jobSpec.publicKey)"
                         requestBlockHash="$(jobRun.logBlockHash)"
                         requestBlockNumber="$(jobRun.logBlockNumber)"
                         topics="$(jobRun.logTopics)"]
estimate_gas            [type=estimategaslimit
						 to="{{.VRF_COORDINATOR_ADDRESS}}"
						 multiplier="1.1"
						 data="$(generate_proof.output)"
						 block="latest"]
simulate_fulfillment    [type=ethcall
						 from="{{.ETH_ADDRESS}}"
                         to="{{.VRF_COORDINATOR_ADDRESS}}"
		                 gas="$(estimate_gas)"
		                 gasPrice="$(jobSpec.maxGasPrice)"
		                 extractRevertReason=true
		                 contract="{{.VRF_COORDINATOR_ADDRESS}}"
		                 data="$(generate_proof.output)"
						 block="latest"]
decode_log->generate_proof->estimate_gas->simulate_fulfillment
"""